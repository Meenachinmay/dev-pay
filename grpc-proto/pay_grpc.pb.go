// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pay.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateAccountServiceClient is the client API for CreateAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateAccountServiceClient interface {
	CreateAccounts(ctx context.Context, in *CreateAccountsRequest, opts ...grpc.CallOption) (*CreateAccountsResponse, error)
}

type createAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateAccountServiceClient(cc grpc.ClientConnInterface) CreateAccountServiceClient {
	return &createAccountServiceClient{cc}
}

func (c *createAccountServiceClient) CreateAccounts(ctx context.Context, in *CreateAccountsRequest, opts ...grpc.CallOption) (*CreateAccountsResponse, error) {
	out := new(CreateAccountsResponse)
	err := c.cc.Invoke(ctx, "/payment.CreateAccountService/CreateAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateAccountServiceServer is the server API for CreateAccountService service.
// All implementations must embed UnimplementedCreateAccountServiceServer
// for forward compatibility
type CreateAccountServiceServer interface {
	CreateAccounts(context.Context, *CreateAccountsRequest) (*CreateAccountsResponse, error)
	mustEmbedUnimplementedCreateAccountServiceServer()
}

// UnimplementedCreateAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreateAccountServiceServer struct {
}

func (UnimplementedCreateAccountServiceServer) CreateAccounts(context.Context, *CreateAccountsRequest) (*CreateAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccounts not implemented")
}
func (UnimplementedCreateAccountServiceServer) mustEmbedUnimplementedCreateAccountServiceServer() {}

// UnsafeCreateAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateAccountServiceServer will
// result in compilation errors.
type UnsafeCreateAccountServiceServer interface {
	mustEmbedUnimplementedCreateAccountServiceServer()
}

func RegisterCreateAccountServiceServer(s grpc.ServiceRegistrar, srv CreateAccountServiceServer) {
	s.RegisterService(&CreateAccountService_ServiceDesc, srv)
}

func _CreateAccountService_CreateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateAccountServiceServer).CreateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.CreateAccountService/CreateAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateAccountServiceServer).CreateAccounts(ctx, req.(*CreateAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateAccountService_ServiceDesc is the grpc.ServiceDesc for CreateAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.CreateAccountService",
	HandlerType: (*CreateAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccounts",
			Handler:    _CreateAccountService_CreateAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}

// TransactionsLookUpServiceClient is the client API for TransactionsLookUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsLookUpServiceClient interface {
	LookupAccounts(ctx context.Context, in *LookupAccountsRequest, opts ...grpc.CallOption) (*LookupAccountsResponse, error)
}

type transactionsLookUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsLookUpServiceClient(cc grpc.ClientConnInterface) TransactionsLookUpServiceClient {
	return &transactionsLookUpServiceClient{cc}
}

func (c *transactionsLookUpServiceClient) LookupAccounts(ctx context.Context, in *LookupAccountsRequest, opts ...grpc.CallOption) (*LookupAccountsResponse, error) {
	out := new(LookupAccountsResponse)
	err := c.cc.Invoke(ctx, "/payment.TransactionsLookUpService/LookupAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsLookUpServiceServer is the server API for TransactionsLookUpService service.
// All implementations must embed UnimplementedTransactionsLookUpServiceServer
// for forward compatibility
type TransactionsLookUpServiceServer interface {
	LookupAccounts(context.Context, *LookupAccountsRequest) (*LookupAccountsResponse, error)
	mustEmbedUnimplementedTransactionsLookUpServiceServer()
}

// UnimplementedTransactionsLookUpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsLookUpServiceServer struct {
}

func (UnimplementedTransactionsLookUpServiceServer) LookupAccounts(context.Context, *LookupAccountsRequest) (*LookupAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccounts not implemented")
}
func (UnimplementedTransactionsLookUpServiceServer) mustEmbedUnimplementedTransactionsLookUpServiceServer() {
}

// UnsafeTransactionsLookUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsLookUpServiceServer will
// result in compilation errors.
type UnsafeTransactionsLookUpServiceServer interface {
	mustEmbedUnimplementedTransactionsLookUpServiceServer()
}

func RegisterTransactionsLookUpServiceServer(s grpc.ServiceRegistrar, srv TransactionsLookUpServiceServer) {
	s.RegisterService(&TransactionsLookUpService_ServiceDesc, srv)
}

func _TransactionsLookUpService_LookupAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsLookUpServiceServer).LookupAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.TransactionsLookUpService/LookupAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsLookUpServiceServer).LookupAccounts(ctx, req.(*LookupAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsLookUpService_ServiceDesc is the grpc.ServiceDesc for TransactionsLookUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsLookUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.TransactionsLookUpService",
	HandlerType: (*TransactionsLookUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupAccounts",
			Handler:    _TransactionsLookUpService_LookupAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}

// CreateTransferServiceClient is the client API for CreateTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateTransferServiceClient interface {
	CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersResponse, error)
}

type createTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateTransferServiceClient(cc grpc.ClientConnInterface) CreateTransferServiceClient {
	return &createTransferServiceClient{cc}
}

func (c *createTransferServiceClient) CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersResponse, error) {
	out := new(CreateTransfersResponse)
	err := c.cc.Invoke(ctx, "/payment.CreateTransferService/CreateTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateTransferServiceServer is the server API for CreateTransferService service.
// All implementations must embed UnimplementedCreateTransferServiceServer
// for forward compatibility
type CreateTransferServiceServer interface {
	CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersResponse, error)
	mustEmbedUnimplementedCreateTransferServiceServer()
}

// UnimplementedCreateTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreateTransferServiceServer struct {
}

func (UnimplementedCreateTransferServiceServer) CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfers not implemented")
}
func (UnimplementedCreateTransferServiceServer) mustEmbedUnimplementedCreateTransferServiceServer() {}

// UnsafeCreateTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateTransferServiceServer will
// result in compilation errors.
type UnsafeCreateTransferServiceServer interface {
	mustEmbedUnimplementedCreateTransferServiceServer()
}

func RegisterCreateTransferServiceServer(s grpc.ServiceRegistrar, srv CreateTransferServiceServer) {
	s.RegisterService(&CreateTransferService_ServiceDesc, srv)
}

func _CreateTransferService_CreateTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateTransferServiceServer).CreateTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.CreateTransferService/CreateTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateTransferServiceServer).CreateTransfers(ctx, req.(*CreateTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateTransferService_ServiceDesc is the grpc.ServiceDesc for CreateTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.CreateTransferService",
	HandlerType: (*CreateTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransfers",
			Handler:    _CreateTransferService_CreateTransfers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
